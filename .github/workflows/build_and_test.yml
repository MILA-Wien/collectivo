name: Collectivo

# Controls when the workflow will run
on:
  workflow_call:
  push:
    tags-ignore:
      - "**"
  pull_request:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-python:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Add in environment variables for postgres testing
    env:
      COLLECTIVO_URL: "127.0.0.1:8000"
      COLLECTIVO_UX_URL: "127.0.0.1:8001"
      COLLECTIVO_SECRET_KEY: test-key-not-good
      DB_USER: postgres
      DB_PASS: postgres
      DB_HOST: localhost # default host value for the database
      DB_NAME: djtesting
      POSTGRES_PORT: 5432
    services:
      # start a postgres service container
      postgres_main:
        image: postgres:12
        env:
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASS }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
          - 5432:5432
        # wait until postgres is ready
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
    strategy:
      # test against these python versions
      matrix:
        python-version: ["3.10"]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup keycloak
        run: |
          docker network create -d bridge collectivo
          cd ${GITHUB_WORKSPACE}/docker/keycloak && docker build -t keycloak .
          /usr/bin/docker run -d -p 8080:8080 --network collectivo --name keycloak --hostname keycloak  -e GITHUB_ACTIONS=true -e CI=true keycloak

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install requirements
        # coverage is for code coverarge
        run: |
          pip install -r requirements.txt
          pip install coverage
      - name: Add hosts to /etc/hosts
        run: |
          sudo echo "127.0.0.1 127.0.0.1" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 keycloak" | sudo tee -a /etc/hosts
          cat /etc/hosts
          while ! curl --connect-timeout 5 -v --max-time 10 --retry 5 --retry-connrefused  --retry-delay 0 --retry-max-time 40 http://keycloak:8080
          do
              { echo "Exit status of curl: $?"
                echo "Retrying ..."
              } 1>&2
              sleep 10
          done
      - name: Run Tests
        # Step specific environment variables
        env:
          DB_HOST: ${{env.DB_HOST}}
          DB_NAME: ${{env.DB_NAME}}
          DB_USER: ${{env.DB_USER}}
          DB_PASS: ${{env.DB_PASS}}
          SECRET_KEY: ${{env.COLLECTIVO_SECRET_KEY}}
          ALLOWED_HOSTS: ${{env.COLLECTIVO_URL}}
          ALLOWED_ORIGINS: http://${{env.COLLECTIVO_UX_URL}}
          KEYCLOAK_URL: http://keycloak:8080
          KEYCLOAK_CLIENT_SECRET: "**********"
          CELERY_BROKER: "redis://:${{env.REDIS_PASSWORD}}@redis:6379/0"
          CELERY_BACKEND: "redis://:${{env.REDIS_PASSWORD}}@redis:6379/0"
          COLLECTIVO_ADMIN_USER: 'admin@example.com'
          COLLECTIVO_ADMIN_PASS: 'admin'
        run: |
          cp -a collectivo collectivo_app
          cd collectivo_app
          python manage.py migrate
          coverage run manage.py test
      - name: Run Lint Checks
        run: |
          cp -a collectivo collectivo_app
          cd collectivo_app
          flake8
      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v1
        with:
          dest: "./logs"
      - name: Tar logs
        if: failure()
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz

  test-docker:
    name: Test docker environment
    runs-on: ubuntu-20.04
    steps:
      - name: Check Credentials
        run: |
          echo ${{ secrets.DOCKERHUB_USER }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Test
        run: |
          cp .env.example .env
          docker-compose up -d
          docker-compose run --rm collectivo sh -c "python manage.py test && flake8"
