version: '3.9'

services:
  # A django app that runs collectivo.
  collectivo:
    container_name: collectivo-app
    restart: 'no'
    build:
      context: .
    ports:
      - '8000:8000'
    # Synchronize source code inside and outside the docker container,
    # and place the collectivo package inside the collectivo app.
    volumes:
      - ./collectivo_app:/collectivo_app
      - ./collectivo:/collectivo_app/collectivo
      - ./docker/static:/collectivo_app/static
    # Wait for database to be ready (this command only works on linux),
    # migrate the database changes and start a development server.
    command: >
      sh -c "while ! nc -z collectivo-db 5432; do sleep 1; done &&
             while ! nc -z keycloak 8080; do sleep 1; done &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      DB_HOST: collectivo-db
      DB_NAME: collectivo_db
      DB_USER: ${COLLECTIVO_DB_USER}
      DB_PASS: ${COLLECTIVO_DB_PASSWORD}
      SECRET_KEY: ${COLLECTIVO_SECRET_KEY}
      KEYCLOAK_CLIENT_ID: collectivo
      KEYCLOAK_REALM_NAME: collectivo
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL}
      KEYCLOAK_CLIENT_SECRET_KEY: ${KEYCLOAK_CLIENT_SECRET_KEY}
      COLLECTIVO_EXTENSIONS: members, shifts, direktkredit
      DEBUG: 1
      DEVELOPMENT: 1
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USE_SSL: ${EMAIL_USE_SSL}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      CELERY_BROKER: 'redis://:${REDIS_PASSWORD}@redis:6379/0'
      CELERY_BACKEND: 'redis://:${REDIS_PASSWORD}@redis:6379/0'
      DIREKTKREDIT_SERVER_URL: 'http://direktkredit.local:8020'
    depends_on:
      - collectivo-db
      - keycloak

  # A celery worker that runs in the background.
  celery:
    container_name: celery
    build:
      context: .
    command: celery -A collectivo_app worker -l info
    volumes:
      - ./collectivo_app:/collectivo_app
      - ./collectivo:/collectivo_app/collectivo
      - ./docker/static:/collectivo_app/static
    environment:
      DB_HOST: collectivo-db
      DB_NAME: collectivo_db
      DB_USER: ${COLLECTIVO_DB_USER}
      DB_PASS: ${COLLECTIVO_DB_PASSWORD}
      SECRET_KEY: ${COLLECTIVO_SECRET_KEY}
      KEYCLOAK_CLIENT_ID: collectivo
      KEYCLOAK_REALM_NAME: collectivo
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL}
      KEYCLOAK_CLIENT_SECRET_KEY: ${KEYCLOAK_CLIENT_SECRET_KEY}
      COLLECTIVO_EXTENSIONS: members, shifts
      DEBUG: 1
      DEVELOPMENT: 1
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USE_SSL: ${EMAIL_USE_SSL}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      CELERY_BROKER: 'redis://:${REDIS_PASSWORD}@redis:6379/0'
      CELERY_BACKEND: 'redis://:${REDIS_PASSWORD}@redis:6379/0'
    depends_on:
      - collectivo
      - redis

  # Another celery worker for chron jobs.
  celery-beat:
    container_name: celery-beat
    build:
      context: .
    command: celery -A collectivo_app beat -l info
    volumes:
      - ./collectivo_app:/collectivo_app
      - ./collectivo:/collectivo_app/collectivo
      - ./docker/static:/collectivo_app/static
    environment:
      DB_HOST: collectivo-db
      DB_NAME: collectivo_db
      DB_USER: ${COLLECTIVO_DB_USER}
      DB_PASS: ${COLLECTIVO_DB_PASSWORD}
      SECRET_KEY: ${COLLECTIVO_SECRET_KEY}
      KEYCLOAK_CLIENT_ID: collectivo
      KEYCLOAK_REALM_NAME: collectivo
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL}
      KEYCLOAK_CLIENT_SECRET_KEY: ${KEYCLOAK_CLIENT_SECRET_KEY}
      COLLECTIVO_EXTENSIONS: members, shifts
      DEBUG: 1
      DEVELOPMENT: 1
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USE_SSL: ${EMAIL_USE_SSL}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      CELERY_BROKER: 'redis://:${REDIS_PASSWORD}@redis:6379/0'
      CELERY_BACKEND: 'redis://:${REDIS_PASSWORD}@redis:6379/0'
    depends_on:
      - collectivo
      - redis

  # A communication broker for celery.
  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - '6379:6379'
    command: >
      --requirepass "${REDIS_PASSWORD}" --appendonly yes --maxmemory 1000mb --maxmemory-policy volatile-lru

  # A static files server for django.
  collectivo-static:
    container_name: collectivo-static
    image: nginx:alpine
    ports:
      - '8002:80'
    volumes:
      - ./docker/static:/app/static
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./docker/nginx/error.html:/usr/share/nginx/html/index.html
    restart: always

  # A PostgreSQL database.
  collectivo-db:
    container_name: collectivo-db
    image: postgres:14-alpine
    volumes:
      - collectivo-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: collectivo_db
      POSTGRES_USER: ${COLLECTIVO_DB_USER}
      POSTGRES_PASSWORD: ${COLLECTIVO_DB_PASSWORD}

  # A frontend web application.
  collectivo-ux:
    container_name: collectivo-ux
    image: milawien/collectivo-ux:latest
    restart: always
    environment:
      VITE_APP_API: http://collectivo.local:8000
      VITE_KEYCLOAK_URL: ${KEYCLOAK_SERVER_URL}
    ports:
      - '8001:80'

  # Keycloak for authentication.
  keycloak:
    build: ./docker/keycloak
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_FRONTEND_URL: ${KEYCLOAK_SERVER_URL}
      ROOT_LOGLEVEL: ALL
      KEYCLOAK_LOGLEVEL: DEBUG
    volumes:
      - ./docker/keycloak/import:/opt/keycloak/data/import:ro
      - ./docker/keycloak/export:/tmp/export
    command: start-dev --import-realm
    ports:
      - '8080:8080'
  habidat-db:
    image: mariadb
    restart: always
    volumes:
      - ./docker/habidat/db:/var/lib/mysql
    environment:
      # please change:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_PASSWORD=secret
      # no need to change for default setup:
      - MYSQL_DATABASE=direktkredit
      - MYSQL_USER=direktkredit
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
    logging:
      options:
        max-size: 50m  
  habidat:
    container_name: habidat
    #image: habidat/direktkredit:1.1
    image: nanu/habidat
    restart: always
    volumes:
      - ./docker/habidat/config/config.sample.json:/habidat/config/config.sample.json
      - ./docker/habidat/files:/habidat/public/files
      - ./docker/habidat/images:/habidat/public/images
      - ./docker/habidat/upload:/habidat/upload  
    environment:
          # please change:
      - HABIDAT_DK_PROJECT_ID=project
      - HABIDAT_DK_PROJECT_NAME=Projectname
      - HABIDAT_DK_PROJECT_EMAIL=
      - HABIDAT_DK_PROJECT_LOGO=logo.gif
      - HABIDAT_DK_ADMIN_EMAIL=admin@example.com
      - HABIDAT_DK_ADMIN_USERNAME=admin
      - HABIDAT_DK_ADMIN_PASSWORD=secret
      - HABIDAT_DK_SESSION_SECRET=secret      
      # no need to change for default setup:
      - HABIDAT_DK_DB_URI=mysql://direktkredit:secret@habidat-db/direktkredit
      - HABIDAT_DK_PORT_HTTP=80
      - HABIDAT_DK_AUTH_ADMIN_METHOD=local,oidc    # ldap is also possible                             
      # only if admin auth method includes LDAP:
      #- HABIDAT_DK_AUTH_ADMIN_LDAP_URI=ldap://host:port
      #- HABIDAT_DK_AUTH_ADMIN_LDAP_HOST=host
      #- HABIDAT_DK_AUTH_ADMIN_LDAP_PORT=389
      #- HABIDAT_DK_AUTH_ADMIN_LDAP_BINDDN=cn=ldap-read,dc=example,dc=com
      #- HABIDAT_DK_AUTH_ADMIN_LDAP_PASSWORD=secret
      #- HABIDAT_DK_AUTH_ADMIN_LDAP_BASE=dc=example,dc=com
      #- HABIDAT_DK_AUTH_ADMIN_LDAP_SEARCHFILTER=(cn={{username}})
      # only if admin auth method includes oidc
      - HABIDAT_DK_AUTH_ADMIN_OIDC_LABEL=Keycloak (Admin)
      - HABIDAT_DK_AUTH_ADMIN_OIDC_ISSUER=${KEYCLOAK_SERVER_URL}/realms/collectivo
      - HABIDAT_DK_AUTH_ADMIN_OIDC_CLIENT_ID=habidat
      - HABIDAT_DK_AUTH_ADMIN_OIDC_CLIENT_SECRET=hF2EGOwy7QTI5G9SNGFTejsC9j8G5X34
      - HABIDAT_DK_AUTH_ADMIN_OIDC_CALLBACK_URL=http://direktkredit.local:8020/login-oidc-cb-admin
      - HABIDAT_DK_AUTH_ADMIN_OIDC_AUTH_URL=${KEYCLOAK_SERVER_URL}/realms/collectivo/protocol/openid-connect/auth
      - HABIDAT_DK_AUTH_ADMIN_OIDC_TOKEN_URL=${KEYCLOAK_SERVER_URL}/realms/collectivo/protocol/openid-connect/token
      - HABIDAT_DK_AUTH_ADMIN_OIDC_USERINFO_URL=${KEYCLOAK_SERVER_URL}/realms/collectivo/protocol/openid-connect/userinfo
      # list of user auth methods (local or oidc)
      - HABIDAT_DK_AUTH_USER_METHOD=oidc                              
      # only if user auth method includes OIDC:
      - HABIDAT_DK_AUTH_USER_OIDC_LABEL=Keycloak
      - HABIDAT_DK_AUTH_USER_OIDC_ISSUER=${KEYCLOAK_SERVER_URL}/realms/collectivo
      - HABIDAT_DK_AUTH_USER_OIDC_CLIENT_ID=habidat
      - HABIDAT_DK_AUTH_USER_OIDC_CLIENT_SECRET=hF2EGOwy7QTI5G9SNGFTejsC9j8G5X34
      - HABIDAT_DK_AUTH_USER_OIDC_CALLBACK_URL=http://direktkredit.local:8020/login-oidc-cb
      - HABIDAT_DK_AUTH_USER_OIDC_AUTH_URL=${KEYCLOAK_SERVER_URL}/realms/collectivo/protocol/openid-connect/auth
      - HABIDAT_DK_AUTH_USER_OIDC_TOKEN_URL=${KEYCLOAK_SERVER_URL}/realms/collectivo/protocol/openid-connect/token
      - HABIDAT_DK_AUTH_USER_OIDC_USERINFO_URL=${KEYCLOAK_SERVER_URL}/realms/collectivo/protocol/openid-connect/userinfo
    depends_on:
      habidat-db:
        condition: service_healthy
    links:
      - habidat-db
    ports:
      - 8020:80
    logging:
      options:
        max-size: 50m        

volumes:
  collectivo-db-data:
