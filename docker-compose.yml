version: "3.9"

services:

  # A sample django project that has installed collectivo.
  collectivo:
    container_name: collectivo-test-app
    restart: "no"
    build:
      context: .
    ports:
      - "8000:8000"
    # Synchronize source code inside and outside the docker container.
    # The collectivo app is placed inside the test app (see Dockerfile).
    volumes:
      - ./collectivo-test-app:/collectivo-test-app
      - ./collectivo:/collectivo-test-app/collectivo
    # Wait for database to be ready (this command will work only on linux),
    # migrate the database changes and start a development server.
    command: > #
      sh -c "while ! nc -z db 5432; do sleep 1; done &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    # Environment variables to connect django with the database.
    environment:
      DB_HOST: db
      DB_NAME: devdb
      DB_USER: devuser
      DB_PASS: changeme
    depends_on:
      - db
      - keycloak
    extra_hosts:
      # Allow for direct communication between services.
      - host.docker.internal:host-gateway

  # A PostgreSQL database.
  db:
    container_name: collectivo-db
    image: postgres:14-alpine
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

  # A frontend web application.
  collectivo-ux:
    container_name: collectivo-ux
    build: https://github.com/MILA-Wien/collectivo-ux.git#main
    restart: always
    ports:
      - "8001:80"
    extra_hosts:
      # Allow for direct communication between services.
      - host.docker.internal:host-gateway

  # Keycloak for authentication.
  # TODO Add a seperate database for keycloak
  keycloak:
    image: "quay.io/keycloak/keycloak:19.0.2"
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # KEYCLOAK_IMPORT: /var/keycloak/master.json
    volumes:
      - ./docker/keycloak:/opt/keycloak/data/import:ro
    command:
      start-dev --import-realm
    ports:
      - "8080:8080"
    extra_hosts:
      # Allow for direct communication between services.
      - host.docker.internal:host-gateway

volumes:
  db-data:
